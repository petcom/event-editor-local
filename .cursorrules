# Agent Rules:
- do local git commits regularly with clear by brief description of the work done
- only push to remote github when asked to by the user
- make sure to keep the README.md file up to day

# Documentation
- docs/ contains files related to documentation
- docs/ARCHITECTURE.md - describes the architecture of the application
- docs/STYLEGUIDE.md - describes the style guide for the application
- docs/DEVELOPMENT.md - describes the development process for the application
- docs/TESTING.md - describes the testing process for the application
- docs/DEPLOYMENT.md - describes the deployment process for the application
- docs/SECURITY.md - describes the security process for the application
- docs/MAINTENANCE.md - describes the maintenance process for the application
- this files should be updated as the application evolves


# Electron and ES6 Best Practices

## Class Structure
- Use ES6 classes for all major components
- Each class should have a clear, single responsibility
- Classes should be well-documented with JSDoc comments
- Public methods must have JSDoc documentation
- Private methods should be prefixed with underscore (_)

## Documentation Standards
- Every class must have a JSDoc comment block describing its purpose
- All public methods must have JSDoc comments including:
  - Description
  - @param tags with types and descriptions
  - @returns tag with type and description
  - @throws tag if applicable
- Use TypeScript-style type annotations in JSDoc for better IDE support

## Code Organization
- Break complex methods into smaller, focused methods
- Methods should be organized in logical groups
- Use single-line comments to explain the "what/why" of code blocks
- Group related code into "paragraphs" with descriptive comments
- Extract repeated code into separate methods (DRY principle)
- Allow single-use methods if they improve readability of complex logic

## Electron-Specific Guidelines
- Separate main and renderer process code
- Use IPC for main-renderer communication
- Implement proper error handling for async operations
- Follow security best practices for Electron apps
- Use contextIsolation and sandbox where possible

## Example Structure
```javascript
/**
 * @class MainWindow
 * @description Manages the main application window and its lifecycle
 */
class MainWindow {
  /**
   * Creates a new instance of MainWindow
   * @param {Object} options - Window creation options
   * @param {number} options.width - Initial window width
   * @param {number} options.height - Initial window height
   */
  constructor(options) {
    // Initialize window properties
    this.width = options.width;
    this.height = options.height;
    
    // Create the browser window
    this._createWindow();
  }

  /**
   * Creates and configures the main browser window
   * @private
   */
  _createWindow() {
    // Set up window configuration
    const config = this._getWindowConfig();
    
    // Create the window instance
    this.window = new BrowserWindow(config);
    
    // Load the initial content
    this._loadInitialContent();
  }
}
```

## Method Organization
- Group related methods together
- Order methods by:
  1. Constructor
  2. Public methods
  3. Private methods
  4. Event handlers
  5. Utility methods

## Error Handling
- Use try-catch blocks for async operations
- Implement proper error logging
- Provide meaningful error messages
- Handle both expected and unexpected errors

## Performance Considerations
- Use async/await for asynchronous operations
- Implement proper cleanup in component unmounting
- Avoid memory leaks in event listeners
- Use appropriate caching strategies

## Testing
- Write unit tests for all public methods
- Include integration tests for IPC communication
- Test error handling scenarios
- Mock external dependencies appropriately


---


# CSS Best Practices

## Organization and Structure
- Separate CSS into logical files:
  - `variables.css` - Global CSS variables and theme definitions
  - `base.css` - Reset and base element styles
  - `components.css` - Reusable component styles
  - `layouts.css` - Layout and grid systems
  - `utilities.css` - Utility classes and helpers

## CSS Variables (Custom Properties)
- Define all colors, spacing, and typography as CSS variables
- Use semantic variable names that describe purpose, not appearance
- Group related variables with consistent prefixes
- Example structure:
```css
:root {
  /* Color System */
  --color-primary: #007bff;
  --color-primary-light: #3395ff;
  --color-primary-dark: #0056b3;
  
  /* Typography */
  --font-family-base: 'Inter', system-ui, sans-serif;
  --font-size-base: 16px;
  --line-height-base: 1.5;
  
  /* Spacing System */
  --spacing-unit: 8px;
  --spacing-small: calc(var(--spacing-unit) * 1);
  --spacing-medium: calc(var(--spacing-unit) * 2);
  --spacing-large: calc(var(--spacing-unit) * 3);
  
  /* Component-specific */
  --button-padding: var(--spacing-medium);
  --button-border-radius: 4px;
}
```

## Class Naming Conventions
- Use BEM (Block Element Modifier) methodology
- Keep class names semantic and descriptive
- Group related classes with consistent prefixes
- Example:
```css
/* Block */
.card { }
.card__header { }  /* Element */
.card__body { }    /* Element */
.card--featured { } /* Modifier */
```

## Component Organization
- Group related styles together
- Use comments to separate component sections
- Maintain consistent property ordering:
  1. Layout properties (display, position)
  2. Box model (margin, padding, border)
  3. Visual styles (background, color)
  4. Typography
  5. Other properties

## Client Customization
- Create a separate `theme.css` file for client-specific overrides
- Use CSS variables for all customizable properties
- Document all customizable variables
- Example:
```css
/* theme.css */
:root {
  /* Client-specific overrides */
  --color-primary: #ff0000;  /* Client's brand color */
  --font-family-base: 'Client Font', sans-serif;
}
```

## Responsive Design
- Use relative units (rem, em, %) when possible
- Define breakpoints as CSS variables
- Group media queries by component
- Example:
```css
:root {
  --breakpoint-sm: 576px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 992px;
}

@media (min-width: var(--breakpoint-md)) {
  .container {
    max-width: 720px;
  }
}
```

## Performance Considerations
- Minimize use of expensive selectors
- Avoid deep nesting (max 3 levels)
- Use CSS containment where appropriate
- Optimize animations for performance
- Use hardware-accelerated properties for animations

## Documentation
- Document all CSS variables and their purpose
- Include usage examples for complex components
- Maintain a style guide for common patterns
- Document browser support requirements
